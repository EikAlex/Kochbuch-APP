from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from shared.db_models import Vorrat, Zutat, Rezept, RezeptZutat
from sqlalchemy.exc import IntegrityError
from datetime import date

def initialize_default_zutaten(db):
    # Liste mit Standard-Zutaten und ihren Einheiten (Name, Einheit)
    default_zutaten_mit_einheit = [
        ("Tomaten", "St√ºck"), ("Kartoffeln", "g"), ("Zwiebeln", "St√ºck"), ("Knoblauch", "St√ºck"),
        ("Salz", "g"), ("Pfeffer", "g"), ("Oliven√∂l", "ml"), ("Mehl", "g"),
        ("Eier", "St√ºck"), ("Milch", "ml"), ("Butter", "g"), ("Hefe", "g"),
        ("Paprika", "St√ºck"), ("Kr√§uter", "g"), ("Zucker", "g"), ("Reis", "g"),
        ("Pasta", "g"), ("Linsen", "g"), ("H√§hnchenbrust", "g"), ("Rindfleisch", "g"),
        ("Schinken", "g"), ("Mozzarella", "g"), ("Parmesan", "g"), ("Sahne", "ml"),
        ("Kochschinken", "g"), ("Paprikapulver", "g"), ("Chili", "St√ºck"), ("Kaffee", "g"),
        ("Kakaopulver", "g"), ("Honig", "ml"), ("Essig", "ml"), ("Senf", "ml"),
        ("Balsamico", "ml"), ("Kokosmilch", "ml"), ("Gem√ºsebr√ºhe", "ml"), ("Fisch", "g"),
        ("Thunfisch", "g"), ("Spinat", "g"), ("Lauch", "St√ºck"), ("Karotten", "St√ºck")
    ]
    # √úberpr√ºfen, ob jede Zutat bereits existiert und hinzuf√ºgen, falls nicht
    for zutat_name, zutat_einheit in default_zutaten_mit_einheit:
        # √úberpr√ºfen, ob die Zutat schon in der DB existiert
        zutat = db.query(Zutat).filter(Zutat.name == zutat_name).first()
        if not zutat:
            # Wenn die Zutat nicht existiert, f√ºgen wir sie hinzu
            # Stellen Sie sicher, dass das Zutat-Modell ein 'einheit'-Feld hat
            new_zutat = Zutat(name=zutat_name, einheit=zutat_einheit)
            db.add(new_zutat)
            # Es ist effizienter, commit() au√üerhalb der Schleife aufzurufen
            # db.commit()
            # db.refresh(new_zutat)
            print(f"Zutat '{zutat_name}' mit Einheit '{zutat_einheit}' wird hinzugef√ºgt.")
        else:
            print(f"Zutat '{zutat_name}' ist bereits vorhanden.")
            # Optional: √úberpr√ºfen und aktualisieren Sie die Einheit, falls sie fehlt oder falsch ist
            if not zutat.einheit:
                 zutat.einheit = zutat_einheit
                 print(f"Einheit f√ºr '{zutat_name}' auf '{zutat_einheit}' aktualisiert.")
            elif zutat.einheit != zutat_einheit:
                 print(f"Hinweis: Vorhandene Einheit '{zutat.einheit}' f√ºr '{zutat_name}' unterscheidet sich von Standard '{zutat_einheit}'.")


    # Einmaliges Commit am Ende, nachdem alle potenziellen neuen Zutaten hinzugef√ºgt wurden
    try:
        db.commit()
        print("Alle neuen Zutaten erfolgreich hinzugef√ºgt und √Ñnderungen committet.")
    except Exception as e:
        db.rollback() # √Ñnderungen r√ºckg√§ngig machen im Fehlerfall
        print(f"Fehler beim Committen der √Ñnderungen: {e}")

############################################################################
# Testdaten / Rezept mit Zutaten anlegen
def initialize_test_rezept(db):
    if True:
        try:
            # Zutaten anlegen, aber nur, wenn sie noch nicht existieren
            zutaten_namen = ["Mehl", "Ei", "Milch", "Zucker"]
            zutaten_einheiten = ["g", "St√ºck", "ml", "g"]
            
            zutaten = []
            for name, einheit in zip(zutaten_namen, zutaten_einheiten):
                # Pr√ºfe, ob die Zutat bereits existiert
                existing_zutat = db.query(Zutat).filter(Zutat.name == name).first()
                if not existing_zutat:
                    # Zutat hinzuf√ºgen, wenn sie nicht existiert
                    zutat = Zutat(name=name, einheit=einheit)
                    db.add(zutat)
                    zutaten.append(zutat)
                else:
                    zutaten.append(existing_zutat)

            db.commit()

            # Vorrat anlegen
            vorrat_daten = [
                (zutaten[0].id, 1000, date(2025, 12, 31), 200),  # Mehl
                (zutaten[1].id, 6, date(2025, 5, 1), 2),      # Ei
                (zutaten[2].id, 500, date(2025, 5, 3), 200),    # Milch
                (zutaten[3].id, 300, date(2026, 1, 1), 500),    # Zucker
            ]

            for zutat_id, menge, haltbar_bis, mindest in vorrat_daten:
                # Pr√ºfe, ob der Vorrat mit dieser Zutat und Haltbarkeit bereits existiert
                existing_vorrat = db.query(Vorrat).filter(
                    Vorrat.zutat_id == zutat_id,
                    Vorrat.haltbar_bis == haltbar_bis,
                    Vorrat.mindestbestand == mindest
                ).first()
                if not existing_vorrat:
                    db.add(Vorrat(zutat_id=zutat_id, menge_vorhanden=menge, haltbar_bis=haltbar_bis))

            db.commit()

            # Rezept anlegen
            rezept = Rezept(name="Pfannkuchen", beschreibung="Mehl, Eier, Milch und Salz in eine Sch√ºssel geben. F√ºr s√º√üe Pfannkuchen etwas Zucker dazugeben. Alles zu einem glatten Teig verr√ºhren. Wenn der Teig zu dick ist, etwas mehr Milch dazugeben. Eine Pfanne erhitzen und mit etwas Butter oder √ñl einfetten. Eine Kelle Teig in die hei√üe Pfanne geben und gleichm√§√üig verteilen. Von beiden Seiten goldbraun backen. Nach Belieben servieren ‚Äì zum Beispiel mit Apfelmus, Marmelade, Zimt und Zucker oder herzhaft gef√ºllt.")
            db.add(rezept)
            db.commit()

            # Zutaten mit Mengen f√ºr das Rezept
            rezept_zutaten = [
                (rezept.id, zutaten[0].id, 200),  # Mehl
                (rezept.id, zutaten[1].id, 2),    # Ei
                (rezept.id, zutaten[2].id, 250),  # Milch
                (rezept.id, zutaten[3].id, 50),   # Zucker
            ]

            for rezept_id, zutat_id, menge in rezept_zutaten:
                # √úberpr√ºfe, ob die Kombination Rezept und Zutat bereits existiert
                existing_rezept_zutat = db.query(RezeptZutat).filter(
                    RezeptZutat.rezept_id == rezept_id,
                    RezeptZutat.zutat_id == zutat_id
                ).first()
                if not existing_rezept_zutat:
                    db.add(RezeptZutat(rezept_id=rezept_id, zutat_id=zutat_id, menge=menge))

            db.commit()

            print("‚úÖ Testdaten erfolgreich hinzugef√ºgt.")

        except IntegrityError as e:
            # Hier f√§ngt man die Exception ab, falls ein Duplikat-Fehler auftritt
            db.rollback()  # Transaktion zur√ºckrollen, falls Fehler auftreten
            print(f"‚ùå Fehler beim Hinzuf√ºgen der Testdaten: {e}")


def check_haltbarkeit(ablaufdatum):
    """
    Returns a color-coded HTML string with a symbol based on expiration date.
    """
    heute = datetime.today().date()
    tage_bis_ablauf = (ablaufdatum - heute).days

    if tage_bis_ablauf < 0:
        farbe = "red"
        symbol = "‚ö†Ô∏è"
    elif tage_bis_ablauf <= 3:
        farbe = "orange"
        symbol = "‚è≥"
    else:
        farbe = "green"
        symbol = ""
    ablaufdatum = ablaufdatum.strftime("%d.%m.%Y")
    return f'<span style="color:{farbe}; font-size:18px;">{symbol} üìÖ {ablaufdatum}</span>'
